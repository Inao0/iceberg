"
Description
--------------------

I am a spec presenter to show the list of PR available for a remote and informations on them.
 
Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
	details:				<aPresenter>		A presenten showing the details for a PR.
	pullRequests:		<anAdaptor>		An adaptor corresponding to a table containing the pull requests to view.
	remote:				<aRemote>			The remote we should view the PR of.

"
Class {
	#name : #IceTipGitHubPullRequestListBrowser,
	#superclass : #IceTipBrowser,
	#instVars : [
		'remote',
		'pullRequests',
		'details'
	],
	#category : #'Iceberg-Plugin-GitHub-View'
}

{ #category : #specs }
IceTipGitHubPullRequestListBrowser class >> defaultSpec [
	^ SpBoxLayout newVertical 
		add: #toolbar expand: false fill: true padding: 0;
		add: ( SpPanedLayout newVertical 
			add: #pullRequests;
			add: #details)
]

{ #category : #'instance creation' }
IceTipGitHubPullRequestListBrowser class >> onRepository: aRepository [
	^ self on: (IceTipRepositoryModel on: aRepository)
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser class >> taskbarIcon [
	^ self iconNamed: #komitterSmalltalkhubRemote
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> contextClass [
	^ IceTipPullRequestsListContext
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> details [
	^ details
]

{ #category : #private }
IceTipGitHubPullRequestListBrowser >> fetchPullRequests [
	^ (IceGitHubAPI new
		getPullRequests: self remote owner project: self remote projectName) all
		collect: [ :each | 
			(IceGitHubPullRequest fromJSON: each)
				repository: self repository entity;
				yourself ]
]

{ #category : #api }
IceTipGitHubPullRequestListBrowser >> initialExtent [
	^ (700 @ 700) scaledByDisplayScaleFactor
]

{ #category : #initialization }
IceTipGitHubPullRequestListBrowser >> initializePresenter [
	super initializePresenter.
"	self pullRequests widget onAnnouncement: FTSelectionChanged send: #uptadeSelectedPullRequest: to: self.
	self pullRequests widget onAnnouncement: FTStrongSelectionChanged send: #strongSelection: to: self."
]

{ #category : #initialization }
IceTipGitHubPullRequestListBrowser >> initializePullRequestsTable [
	pullRequests
		beResizable;
		addColumn:
			(SpStringTableColumn new
				title: '#';
				evaluated: [ :pullRequest | pullRequest number asString ];
				width: 50 * World displayScaleFactor;
				yourself);
		addColumn:
			(SpStringTableColumn new
				title: 'State';
				evaluated: #state;
				width: 50 * World displayScaleFactor;
				yourself);
		addColumn:
			(SpStringTableColumn new
				title: 'Author';
				evaluated: #author;
				width: 120 * World displayScaleFactor;
				yourself);
		addColumn:
			(SpStringTableColumn new
				title: 'Title';
				evaluated: #title;
				yourself);
		items: self fetchPullRequests;
		whenSelectionChangedDo: [ :selection | 
			[ :pullRequest | self details pullRequest: pullRequest ]
				cull: selection selectedItem ]
]

{ #category : #initialization }
IceTipGitHubPullRequestListBrowser >> initializeWidgets [
	super initializeWidgets.
	pullRequests := self newTable.
	details := self instantiate: IceGitHubPullRequestDetailModel.
	
	self initializePullRequestsTable.
	
	self focusOrder
		add: pullRequests;
		add: details
]

{ #category : #private }
IceTipGitHubPullRequestListBrowser >> newContextWithSelection: anObject [
	^ self newContext 
		item: anObject;
		yourself
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> pullRequests [
	^ pullRequests
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> pullRequests: anObject [
	pullRequests := anObject
]

{ #category : #actions }
IceTipGitHubPullRequestListBrowser >> refreshPullRequests [
	| table |
	table := self pullRequests.
	table items: self fetchPullRequests.
	(table selection selectedItem isNil and: [ table items isNotEmpty ])
		ifTrue: [ table selectIndex: 1 ]
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> remote [
	^ (remote ifNil: [ remote := self repository remotes first ])
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> remote: anObject [
	remote := anObject
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> repository [
	^ model
]

{ #category : #accessing }
IceTipGitHubPullRequestListBrowser >> selectedPullRequest [
	| table |
	table := self pullRequests widget.
	^ table dataSource elementAt: table selectedRowIndex 
]

{ #category : #'as yet unclassified' }
IceTipGitHubPullRequestListBrowser >> strongSelection: anEvent [
	self viewPullRequest: (self pullRequests widget dataSource elementAt: anEvent selectedRowIndex)
]

{ #category : #initialization }
IceTipGitHubPullRequestListBrowser >> title [
	^ 'Pull requests on {1} ({2})' format: { self remote name. self remote url}
]

{ #category : #'as yet unclassified' }
IceTipGitHubPullRequestListBrowser >> uptadeSelectedPullRequest: anEvent [
	self details
		pullRequest:
			(anEvent newSelectedIndexes
				ifNotEmpty:
					[ :indexes | self pullRequests widget dataSource elementAt: indexes first ]
				ifEmpty: [ IceGitHubNilPullRequest new ])
]

{ #category : #actions }
IceTipGitHubPullRequestListBrowser >> viewPullRequest: aPullRequest [
	UIManager default
		informUser:
			('Opening pull request {1} {2}'
				format:
					{aPullRequest number.
					aPullRequest title})
		during: [ "IceGitHubPullRequestBrowser new 
			pullRequest: aPullRequest;
			open" (IceGitHubTipPullRequestBrowser on: self model pullRequest: aPullRequest) openWithSpec ]
]
